<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>BetMines Pro App (Stabile)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
    <style>
        body { font-family: 'Inter', sans-serif; }
        .card { background: white; border: 1px solid #e5e7eb; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.07), 0 2px 4px -2px rgb(0 0 0 / 0.07); }
        .stat-box { background-color: #f9fafb; border: 1px solid #e5e7eb; }
        .stat-positive { color: #16a34a; } .stat-negative { color: #dc2626; } .stat-neutral { color: #2563eb; }
        input[type="date"], input[type="number"] { background-color: #f3f4f6; border: 1px solid #d1d5db; border-radius: 0.5rem; padding: 0.5rem; color: #1f2937; font-weight: 500; }
        .custom-file-input::-webkit-file-upload-button { visibility: hidden; }
        .custom-file-input::before { content: 'Seleziona File .csv'; display: inline-block; background: #4f46e5; color: white; border-radius: 0.5rem; padding: 0.6rem 1rem; outline: none; white-space: nowrap; cursor: pointer; font-weight: 600; }
        .result-tag { padding: 0.25rem 0.75rem; border-radius: 0.375rem; font-weight: 700; text-transform: uppercase; font-size: 0.75rem; display: inline-block; color: white; }
        .result-win { background-color: #16a34a; } .result-loss { background-color: #dc2626; }
        .filter-option { cursor: pointer; padding: 0.3rem 0.6rem; border-radius: 9999px; border: 1px solid #d1d5db; transition: all 0.2s; user-select: none; font-size: 0.8rem; }
        .filter-option.selected { background-color: #4f46e5; color: white; border-color: #4f46e5; font-weight: 600; }
        .nav-button { padding: 0.5rem 1rem; border-radius: 0.5rem; font-weight: 600; transition: all 0.2s; border: 2px solid transparent; }
        .nav-button.active { background-color: #4f46e5; color: white; }
        .nav-button:not(.active) { background-color: white; color: #4f46e5; border-color: #4f46e5; }
        .page { display: none; }
        .page.active { display: block; }
    </style>
</head>
<body class="bg-gray-100 text-gray-800">
    <div id="loading-overlay" class="fixed inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-50 transition-opacity duration-300">
        <div class="text-white text-xl font-semibold animate-pulse">Caricamento dati...</div>
    </div>
    <div class="container mx-auto p-4 md:p-8">
        <header class="text-center mb-4"><h1 class="text-4xl md:text-5xl font-extrabold text-gray-900">BetMines Pro Dashboard</h1></header>
        <nav class="flex justify-center items-center gap-4 mb-10 p-2 bg-gray-200 rounded-lg">
            <button id="nav-dashboard" data-page="page-analysis" class="nav-button">üìä Dashboard</button>
            <button id="nav-data" data-page="page-data" class="nav-button">üóÇÔ∏è Gestione Dati</button>
        </nav>
        <main id="page-data" class="page">
             <section class="mb-12 card p-6 rounded-2xl">
                <h2 class="text-2xl font-bold mb-6 text-gray-900">Gestione Dati</h2>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <div>
                        <h3 class="text-lg font-semibold mb-3">Carica Nuove Partite</h3>
                        <div class="flex flex-col sm:flex-row gap-4 items-end">
                            <div><label for="match-date" class="block text-sm font-semibold mb-2">1. Data da Assegnare</label><input type="date" id="match-date" class="w-full"></div>
                            <div class="flex-grow"><label for="file-upload" class="block text-sm font-semibold mb-2">2. File CSV</label><input id="file-upload" type="file" class="custom-file-input w-full" accept=".csv"></div>
                        </div>
                        <div class="flex flex-col sm:flex-row gap-3 items-center mt-4">
                            <button id="save-data-btn" class="bg-emerald-600 hover:bg-emerald-700 text-white font-bold py-2.5 px-4 rounded-lg shadow-lg disabled:bg-gray-300" disabled>Salva Dati</button>
                            <div id="parser-status" class="text-sm min-h-[44px] flex items-center justify-center font-semibold text-gray-700 flex-grow"></div>
                        </div>
                    </div>
                    <div class="border-t lg:border-t-0 lg:border-l border-gray-200 pl-0 lg:pl-8 pt-6 lg:pt-0">
                        <h3 class="text-lg font-semibold mb-3">Azioni sul Database</h3>
                        <div class="mb-4">
                           <label class="block text-sm font-semibold mb-2">Esporta Dati</label>
                           <button id="export-data-btn" class="bg-sky-600 hover:bg-sky-700 text-white font-bold py-2.5 px-4 rounded-lg shadow-md w-full sm:w-auto">Esporta in CSV</button>
                        </div>
                        <div>
                           <label class="block text-sm font-semibold mb-2">Azione Drastica</label>
                           <button id="clear-data-btn" class="bg-rose-600 hover:bg-rose-700 text-white font-bold py-2.5 px-4 rounded-lg shadow-lg w-full sm:w-auto">Azzera Tutto</button>
                        </div>
                    </div>
                </div>
            </section>
        </main>
        <main id="page-analysis" class="page">
            <section class="mb-12 card p-6 rounded-2xl">
                <h2 class="text-2xl font-bold mb-6 text-gray-900">Dashboard di Analisi</h2>
                <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-6">
                    <div>
                        <div class="flex justify-between items-center mb-2">
                            <label class="block text-sm font-semibold">Campionati (Multi-scelta)</label>
                            <span id="league-filter-count" class="text-sm font-bold text-indigo-600">Nessun filtro</span>
                        </div>
                        <div id="league-filter-container" class="p-3 bg-gray-50 rounded-lg border border-gray-200 max-h-40 overflow-y-auto"></div>
                    </div>
                    <div>
                        <div class="flex justify-between items-center mb-2">
                            <label class="block text-sm font-semibold">Tip Specifici (Multi-scelta)</label>
                            <span id="tip-filter-count" class="text-sm font-bold text-indigo-600">Nessun filtro</span>
                        </div>
                        <div id="tip-filter-container" class="p-3 bg-gray-50 rounded-lg border border-gray-200 max-h-40 overflow-y-auto"></div>
                    </div>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6 items-end">
                    <div>
                        <label class="block text-sm font-semibold mb-2">Range Probabilit√† (%)</label>
                        <div class="flex items-center gap-2">
                            <input type="number" id="prob-min" placeholder="Min" class="w-full"><span class="text-gray-500">-</span><input type="number" id="prob-max" placeholder="Max" class="w-full">
                        </div>
                    </div>
                    <div>
                        <label class="block text-sm font-semibold mb-2">Range Quota</label>
                        <div class="flex items-center gap-2">
                            <input type="number" id="odds-min" placeholder="Min" step="0.01" class="w-full"><span class="text-gray-500">-</span><input type="number" id="odds-max" placeholder="Max" step="0.01" class="w-full">
                        </div>
                    </div>
                    <div class="flex flex-col sm:flex-row gap-2">
                        <div><label for="filter-date-start" class="block text-sm font-semibold mb-2">Da</label><input type="date" id="filter-date-start" class="w-full"></div>
                        <div><label for="filter-date-end" class="block text-sm font-semibold mb-2">A</label><input type="date" id="filter-date-end" class="w-full"></div>
                    </div>
                </div>
                 <div class="flex justify-end mb-6 border-t border-gray-200 pt-6">
                    <button id="reset-filters-btn" class="bg-gray-200 hover:bg-gray-300 text-gray-800 font-bold py-2.5 px-4 rounded-lg h-fit w-full sm:w-auto border">Resetta Tutti i Filtri</button>
                </div>
                <div class="mb-6 pt-4 border-t border-gray-200"><div id="stats-summary-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4"></div></div>
                <div>
                     <h3 class="text-xl font-bold mb-2 text-gray-900">Partite Corrispondenti (<span id="filtered-count">0</span>)</h3>
                     <div class="overflow-x-auto bg-white rounded-lg max-h-96 overflow-y-auto border">
                        <table class="w-full text-sm text-left">
                             <thead class="bg-gray-100 text-xs uppercase sticky top-0"><tr class="text-gray-600">
                                    <th class="p-3 font-semibold">Data</th><th class="p-3 font-semibold">Campionato</th><th class="p-3 font-semibold">Partita</th>
                                    <th class="p-3 font-semibold text-center">Punteggio</th><th class="p-3 font-semibold text-center">Prob.</th>
                                    <th class="p-3 font-semibold">Mercato</th><th class="p-3 font-semibold text-center">Tip</th><th class="p-3 font-semibold text-center">Quota</th>
                                    <th class="p-3 font-semibold text-center">Esito</th>
                            </tr></thead>
                            <tbody id="filtered-matches-body" class="divide-y divide-gray-200"></tbody>
                        </table>
                    </div>
                </div>
            </section>
        </main>
        <footer class="text-center mt-12 text-gray-500 text-sm"><p>Disclaimer: Questo strumento √® a scopo educativo.</p></footer>
    </div>

    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
        import { getFirestore, collection, getDocs, doc, writeBatch, query, where } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

        document.addEventListener('DOMContentLoaded', () => {
            const firebaseConfig = {
                apiKey: "AIzaSyCWay4QfY1bxj4yBLnho3Zn02_NaxzbVRQ",
                authDomain: "betmines-pronostici.firebaseapp.com",
                projectId: "betmines-pronostici",
                storageBucket: "betmines-pronostici.firebasestorage.app",
                messagingSenderId: "716119578109",
                appId: "1:716119578109:web:01e8b9dad7b17c91d63594"
            };
            const app = initializeApp(firebaseConfig);
            const db = getFirestore(app);
            const matchesCollection = collection(db, "matches");
            let historicalData = [], parsedDataCache = [], selectedLeagues = [], selectedTips = [];
            const allMarketTips = { "1X2": ["1", "X", "2"],"Doppia chance": ["1X", "X2", "12"],"Gol/No Gol": ["Gol", "No Gol"],"Numero di gol": ["-0.5", "+0.5", "-1.5", "+1.5", "-2.5", "+2.5", "-3.5", "+3.5", "-4.5", "+4.5"] };
            
            const fileUpload = document.getElementById('file-upload'), matchDateInput = document.getElementById('match-date'), parserStatus = document.getElementById('parser-status'), saveDataBtn = document.getElementById('save-data-btn'), clearDataBtn = document.getElementById('clear-data-btn'), filterDateStart = document.getElementById('filter-date-start'), filterDateEnd = document.getElementById('filter-date-end'), resetFiltersBtn = document.getElementById('reset-filters-btn'), statsContainer = document.getElementById('stats-summary-container'), filteredMatchesBody = document.getElementById('filtered-matches-body'), filteredCount = document.getElementById('filtered-count'), loadingOverlay = document.getElementById('loading-overlay'), exportDataBtn = document.getElementById('export-data-btn'), tipFilterContainer = document.getElementById('tip-filter-container'), tipFilterCount = document.getElementById('tip-filter-count'), leagueFilterContainer = document.getElementById('league-filter-container'), leagueFilterCount = document.getElementById('league-filter-count'), pages = document.querySelectorAll('.page'), navButtons = document.querySelectorAll('.nav-button'), probMinInput = document.getElementById('prob-min'), probMaxInput = document.getElementById('prob-max'), oddsMinInput = document.getElementById('odds-min'), oddsMaxInput = document.getElementById('odds-max');

            const determineResult = (market, tip, score) => {
                const scoreParts = score.split('-'); if (scoreParts.length < 2) return false;
                const homeGoals = parseInt(scoreParts[0], 10); const awayGoals = parseInt(scoreParts[1], 10);
                if (isNaN(homeGoals) || isNaN(awayGoals)) return false;
                const totalGoals = homeGoals + awayGoals; const cleanMarket = market.toLowerCase().trim(); const cleanTip = tip.toUpperCase().trim();
                if (cleanMarket.includes('numero di gol')) { const value = parseFloat(tip.replace(/[+-]/g, '')); if (tip.includes('+')) return totalGoals > value; if (tip.includes('-')) return totalGoals < value; }
                else if (cleanMarket.includes('1x2')) { if (cleanTip === '1') return homeGoals > awayGoals; if (cleanTip === 'X') return homeGoals === awayGoals; if (cleanTip === '2') return homeGoals < awayGoals; }
                else if (cleanMarket.includes('doppia chance')) { if (cleanTip === '1X') return homeGoals >= awayGoals; if (cleanTip === 'X2') return homeGoals <= awayGoals; if (cleanTip === '12') return homeGoals !== awayGoals; }
                else if (cleanMarket.includes('gol/no gol')) { if (cleanTip.includes('SI') || cleanTip.includes('GOL') || cleanTip.includes('GG')) return homeGoals > 0 && awayGoals > 0; if (cleanTip.includes('NO') || cleanTip.includes('NG')) return homeGoals === 0 || awayGoals === 0; }
                return false;
            };

            const parseCSVText = (text, matchDate) => {
                const matches = []; const lines = text.trim().split('\n'); if (lines.length < 2) return [];
                const delimiter = lines[0].includes(';') ? ';' : ',';
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim(); if (!line) continue;
                    const columns = line.split(delimiter).map(c => c.trim().replace(/"/g, ''));
                    if (columns.length < 9) continue;
                    try {
                        const [homeTeam, awayTeam, homeGoalsStr, awayGoalsStr, market, tip, probString, oddsString, league] = columns;
                        if (!homeTeam || !awayTeam || !market || !tip) continue;
                        let homeGoals = parseInt(homeGoalsStr, 10); let awayGoals = parseInt(awayGoalsStr, 10);
                        let probability = parseInt(probString.replace('%', ''), 10); let odds = parseFloat(oddsString.replace(',', '.'));
                        if (isNaN(homeGoals)) homeGoals = 0; if (isNaN(awayGoals)) awayGoals = 0;
                        if (isNaN(probability)) probability = 0; if (isNaN(odds)) odds = 0;
                        const score = `${homeGoals}-${awayGoals}`;
                        const result = determineResult(market, tip, score);
                        matches.push({ date: matchDate, homeTeam, awayTeam, score, probability, market, tip, odds, league: league || 'Non specificato', result });
                    } catch (e) { console.warn(`Riga saltata: "${line}"`, e); }
                }
                return matches;
            };
            
            const handleFileUpload = (event) => { const file = event.target.files[0]; const matchDate = matchDateInput.value; if (!file || !matchDate) { parserStatus.textContent = 'Seleziona data e file.'; return; } saveDataBtn.disabled = true; parserStatus.textContent = `Leggendo ${file.name}...`; const reader = new FileReader(); reader.onload = (e) => { const text = e.target.result; try { parsedDataCache = parseCSVText(text, matchDate); if (parsedDataCache.length === 0) { parserStatus.textContent = 'Nessuna partita valida trovata.'; return; } parserStatus.textContent = `Analisi completata: ${parsedDataCache.length} partite trovate. Pronto per salvare.`; saveDataBtn.disabled = false; } catch (error) { console.error("Errore analisi:", error); parserStatus.textContent = 'Errore analisi file.'; } }; reader.readAsText(file, 'UTF-8'); };
            const handleSaveData = async () => { if (parsedDataCache.length === 0) return; saveDataBtn.disabled = true; parserStatus.textContent = 'Controllo duplicati...'; const newEntries = parsedDataCache.filter(parsedBet => !historicalData.some(savedBet => savedBet.homeTeam === parsedBet.homeTeam && savedBet.awayTeam === parsedBet.awayTeam && savedBet.tip === parsedBet.tip && savedBet.league === parsedBet.league)); if (newEntries.length === 0) { parserStatus.textContent = `Nessuna nuova partita. (${parsedDataCache.length} erano gi√† presenti).`; fileUpload.value = ''; saveDataBtn.disabled = true; return; } parserStatus.textContent = `Salvataggio di ${newEntries.length} nuove partite...`; try { const batch = writeBatch(db); newEntries.forEach(entry => { const newMatchRef = doc(matchesCollection); batch.set(newMatchRef, entry); }); await batch.commit(); await loadDataFromFirestore(); populateFilters(); applyFiltersAndRender(); const duplicateCount = parsedDataCache.length - newEntries.length; parserStatus.textContent = `${newEntries.length} nuove partite salvate! ${duplicateCount} duplicate ignorate.`; } catch (error) { console.error("Errore nel salvataggio: ", error); parserStatus.textContent = 'Errore durante il salvataggio.'; } finally { fileUpload.value = ''; } };
            const handleClearData = async () => { if (confirm("Sei sicuro di voler cancellare TUTTA la cronologia?")) { parserStatus.textContent = 'Cancellazione...'; try { const querySnapshot = await getDocs(matchesCollection); const batch = writeBatch(db); querySnapshot.forEach(doc => { batch.delete(doc.ref); }); await batch.commit(); await loadDataFromFirestore(); populateFilters(); applyFiltersAndRender(); parserStatus.textContent = 'Cronologia dati azzerata.'; } catch (error) { console.error("Errore cancellazione: ", error); parserStatus.textContent = 'Errore cancellazione.'; } } };
            const handleExportData = () => { if (historicalData.length === 0) { alert("Non ci sono dati da esportare."); return; } const headers = "Data;Campionato;Squadra Casa;Squadra Ospite;Punteggio;Probabilit√†;Mercato;Tip;Quota;Esito"; const rows = historicalData.map(bet => { const resultText = bet.result ? "Vinta" : "Persa"; const scoreText = bet.score.includes('NaN') ? 'N/D' : bet.score; return [bet.date, bet.league, bet.homeTeam, bet.awayTeam, scoreText, `${bet.probability}%`, bet.market, bet.tip, bet.odds.toFixed(2), resultText].join(';'); }); const csvString = [headers, ...rows].join('\n'); const blob = new Blob(["\uFEFF" + csvString], { type: 'text/csv;charset=utf-8;' }); const link = document.createElement("a"); const url = URL.createObjectURL(blob); link.setAttribute("href", url); const fileName = `betmines_export_${new Date().toISOString().slice(0, 10)}.csv`; link.setAttribute("download", fileName); link.style.visibility = 'hidden'; document.body.appendChild(link); link.click(); document.body.removeChild(link); };
            const showPage = (pageId) => { pages.forEach(page => { page.classList.remove('active'); }); document.getElementById(pageId).classList.add('active'); navButtons.forEach(button => { if (button.dataset.page === pageId) { button.classList.add('active'); } else { button.classList.remove('active'); } }); };
            const loadDataFromFirestore = async () => { loadingOverlay.style.display = 'flex'; loadingOverlay.style.opacity = '1'; try { const querySnapshot = await getDocs(matchesCollection); historicalData = []; querySnapshot.forEach((doc) => { historicalData.push(doc.data()); }); } catch (error) { console.error("Errore caricamento dati: ", error); alert("Impossibile caricare i dati."); } finally { loadingOverlay.style.opacity = '0'; setTimeout(() => { loadingOverlay.style.display = 'none'; }, 300); } };
            const renderMultiSelectFilter = (container, countEl, data, key, onchange) => { container.innerHTML = ''; const options = [...new Set(data.map(d => d[key]).filter(val => val))].sort(); options.forEach(optionText => { const option = document.createElement('span'); option.className = 'filter-option'; option.textContent = optionText; option.dataset.value = optionText; option.addEventListener('click', () => { option.classList.toggle('selected'); onchange(); }); container.appendChild(option); }); };
            const updateMultiSelectCount = (container, countEl) => { const selectedCount = container.querySelectorAll('.selected').length; if (selectedCount === 0) { countEl.textContent = 'Nessun filtro'; } else if (selectedCount === 1) { countEl.textContent = '1 selezionato'; } else { countEl.textContent = `${selectedCount} selezionati`; } return Array.from(container.querySelectorAll('.selected')).map(el => el.dataset.value); };
            const populateFilters = () => {
                renderMultiSelectFilter(leagueFilterContainer, leagueFilterCount, historicalData, 'league', applyFiltersAndRender);
                renderMultiSelectFilter(tipFilterContainer, tipFilterCount, historicalData.map(d => ({ tip: `${d.market} - ${d.tip}` })), 'tip', applyFiltersAndRender);
            };
            const applyFiltersAndRender = () => {
                selectedLeagues = updateMultiSelectCount(leagueFilterContainer, leagueFilterCount);
                selectedTips = updateMultiSelectCount(tipFilterContainer, tipFilterCount);
                const fMinProb = parseFloat(probMinInput.value) || 0; const fMaxProb = parseFloat(probMaxInput.value) || 100;
                const fMinOdd = parseFloat(oddsMinInput.value) || 0; const fMaxOdd = parseFloat(oddsMaxInput.value) || 999;
                const fDateStart = filterDateStart.value; const fDateEnd = filterDateEnd.value;
                const filteredData = historicalData.filter(bet => {
                    const leagueMatch = selectedLeagues.length === 0 || selectedLeagues.includes(bet.league);
                    const tipMatch = selectedTips.length === 0 || selectedTips.includes(`${bet.market} - ${bet.tip}`);
                    const probMatch = bet.probability >= fMinProb && bet.probability <= fMaxProb;
                    const oddsMatch = bet.odds >= fMinOdd && bet.odds <= fMaxOdd;
                    const dateMatch = (!fDateStart || bet.date >= fDateStart) && (!fDateEnd || bet.date <= fDateEnd);
                    return leagueMatch && tipMatch && probMatch && oddsMatch && dateMatch;
                });
                renderFilteredStats(filteredData); renderFilteredMatches(filteredData);
            };
            const calculateStats = (data) => { if (data.length === 0) return { wins: 0, total: 0, winRate: 0 }; const wins = data.filter(bet => bet.result).length; const total = data.length; const winRate = total > 0 ? (wins / total) * 100 : 0; return { wins, total, winRate }; };
            const renderFilteredStats = (data) => { const stats = calculateStats(data); const losses = stats.total - stats.wins; statsContainer.innerHTML = `<div class="stat-box p-4 rounded-xl text-center"><h3 class="font-semibold text-gray-500 text-sm">Partite Totali</h3><p class="text-4xl font-bold mt-1 text-blue-600">${stats.total}</p></div><div class="stat-box p-4 rounded-xl text-center"><h3 class="font-semibold text-gray-500 text-sm">Vinte</h3><p class="text-4xl font-bold mt-1 text-green-600">${stats.wins}</p></div><div class="stat-box p-4 rounded-xl text-center"><h3 class="font-semibold text-gray-500 text-sm">Perse</h3><p class="text-4xl font-bold mt-1 text-red-600">${losses}</p></div><div class="stat-box p-4 rounded-xl text-center"><h3 class="font-semibold text-gray-500 text-sm">Win Rate</h3><p class="text-4xl font-bold mt-1 ${stats.winRate >= 50 ? 'text-green-600' : 'text-red-600'}">${stats.winRate.toFixed(1)}%</p></div>`; };
            const renderFilteredMatches = (data) => {
                filteredCount.textContent = data.length;
                if (data.length === 0) { filteredMatchesBody.innerHTML = `<tr><td colspan="9" class="p-4 text-center text-gray-500 font-semibold">Nessuna partita corrisponde.</td></tr>`; return; }
                filteredMatchesBody.innerHTML = data.sort((a,b) => new Date(b.date) - new Date(a.date)).map(bet => {
                    const formattedDate = new Date(bet.date + 'T00:00:00').toLocaleDateString('it-IT', { day: '2-digit', month: '2-digit', year: '2-digit' });
                    const scoreText = bet.score.includes('NaN') ? 'N/D' : bet.score;
                    return `<tr class="text-gray-800"><td class="p-3 text-xs text-gray-600">${formattedDate}</td><td class="p-3 text-sm text-gray-500">${bet.league}</td><td class="p-3 font-bold">${bet.homeTeam} vs ${bet.awayTeam}</td><td class="p-3 text-center font-mono font-bold">${scoreText}</td><td class="p-3 text-center">${bet.probability}%</td><td class="p-3">${bet.market}</td><td class="p-3 text-center font-bold">${bet.tip}</td><td class="p-3 text-center">${bet.odds.toFixed(2)}</td><td class="p-3 text-center"><span class="result-tag ${bet.result ? 'result-win' : 'result-loss'}">${bet.result ? 'Vinta' : 'Persa'}</span></td></tr>`;
                }).join('');
            };
            const resetFilters = () => {
                selectedLeagues = []; document.querySelectorAll('#league-filter-container .filter-option.selected').forEach(el => el.classList.remove('selected')); updateMultiSelectCount(leagueFilterContainer, leagueFilterCount);
                selectedTips = []; document.querySelectorAll('#tip-filter-container .filter-option.selected').forEach(el => el.classList.remove('selected')); updateMultiSelectCount(tipFilterContainer, tipFilterCount);
                probMinInput.value = ''; probMaxInput.value = ''; oddsMinInput.value = ''; oddsMaxInput.value = '';
                filterDateStart.value = ''; filterDateEnd.value = '';
                applyFiltersAndRender();
            };
            const init = async () => {
                matchDateInput.valueAsDate = new Date();
                fileUpload.addEventListener('change', handleFileUpload);
                saveDataBtn.addEventListener('click', handleSaveData);
                clearDataBtn.addEventListener('click', handleClearData);
                deleteByDateBtn.addEventListener('click', handleDeleteByDate);
                exportDataBtn.addEventListener('click', handleExportData);
                const allInputFilters = [filterDateStart, filterDateEnd, probMinInput, probMaxInput, oddsMinInput, oddsMaxInput];
                allInputFilters.forEach(el => el.addEventListener('input', applyFiltersAndRender));
                resetFiltersBtn.addEventListener('click', resetFilters);
                navButtons.forEach(button => { button.addEventListener('click', () => { showPage(button.dataset.page); }); });
                await loadDataFromFirestore();
                populateFilters();
                applyFiltersAndRender();
                showPage('page-analysis');
            };
            init();
        });
    </script>
</body>
</html>